// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and user management
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  displayName   String?
  password      String    // Hashed password
  avatar        String?   // URL to avatar image
  phoneNumber   String?   @unique
  status        UserStatus @default(ACTIVE)
  timezone      String    @default("UTC")
  language      String    @default("en")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  organizations   OrganizationMember[]
  messages       Message[]        @relation("MessageSender")
  chatMembers    ChatMember[]
  documents      Document[]       @relation("DocumentCreator")
  documentEdits  DocumentEdit[]
  events         Event[]          @relation("EventCreator")
  eventAttendees EventAttendee[]
  tasks          Task[]           @relation("TaskCreator")
  assignedTasks  Task[]          @relation("TaskAssignee")
  approvals      Approval[]      @relation("ApprovalCreator")
  approvalSteps  ApprovalStep[]  @relation("Approver")
  meetings       Meeting[]       @relation("MeetingOrganizer")
  meetingAttendees MeetingAttendee[]
}

// Organization (Company/Team)
model Organization {
  id          String    @id @default(cuid())
  name        String
  domain      String?   @unique
  logo        String?
  settings    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  members     OrganizationMember[]
  teams       Team[]
  chats       Chat[]
  documents   Document[]
  events      Event[]
  approvals   Approval[]
}

// Organization Member
model OrganizationMember {
  id            String    @id @default(cuid())
  role          OrgRole   @default(MEMBER)
  department    String?
  title         String?
  joinedAt      DateTime  @default(now())

  // Relations
  organization  Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId        String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  teams        TeamMember[]

  @@unique([orgId, userId])
}

// Team
model Team {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId       String
  members     TeamMember[]
}

// Team Member
model TeamMember {
  id          String    @id @default(cuid())
  role        TeamRole  @default(MEMBER)
  joinedAt    DateTime  @default(now())

  // Relations
  team        Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId      String
  member      OrganizationMember @relation(fields: [orgMemberId], references: [id], onDelete: Cascade)
  orgMemberId String

  @@unique([teamId, orgMemberId])
}

// Chat/Messaging
model Chat {
  id          String    @id @default(cuid())
  type        ChatType  @default(DIRECT)
  name        String?
  avatar      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId       String
  members     ChatMember[]
  messages    Message[]
}

// Chat Member
model ChatMember {
  id          String    @id @default(cuid())
  role        ChatRole  @default(MEMBER)
  joinedAt    DateTime  @default(now())
  lastRead    DateTime  @default(now())

  // Relations
  chat        Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  @@unique([chatId, userId])
}

// Message
model Message {
  id          String    @id @default(cuid())
  content     String
  type        MessageType @default(TEXT)
  metadata    Json?     // For rich content, attachments
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // Relations
  chat        Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId      String
  sender      User      @relation("MessageSender", fields: [senderId], references: [id])
  senderId    String
  replyTo     Message?  @relation("MessageReplies", fields: [replyToId], references: [id])
  replyToId   String?
  replies     Message[] @relation("MessageReplies")
}

// Document
model Document {
  id          String    @id @default(cuid())
  title       String
  content     String    @db.Text
  type        DocType   @default(DOC)
  isTemplate  Boolean   @default(false)
  permissions Json      // Access control settings
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId       String
  creator     User      @relation("DocumentCreator", fields: [creatorId], references: [id])
  creatorId   String
  parent      Document? @relation("DocumentHierarchy", fields: [parentId], references: [id])
  parentId    String?
  children    Document[] @relation("DocumentHierarchy")
  edits       DocumentEdit[]
}

// Document Edit History
model DocumentEdit {
  id          String    @id @default(cuid())
  changes     Json      // Delta of changes
  createdAt   DateTime  @default(now())

  // Relations
  document    Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId  String
  editor      User      @relation(fields: [editorId], references: [id])
  editorId    String
}

// Calendar Event
model Event {
  id          String    @id @default(cuid())
  title       String
  description String?
  location    String?
  startTime   DateTime
  endTime     DateTime
  isAllDay    Boolean   @default(false)
  recurrence  Json?     // Recurrence rules
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId       String
  creator     User      @relation("EventCreator", fields: [creatorId], references: [id])
  creatorId   String
  attendees   EventAttendee[]
}

// Event Attendee
model EventAttendee {
  id          String    @id @default(cuid())
  status      AttendeeStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  event       Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  @@unique([eventId, userId])
}

// Meeting
model Meeting {
  id          String    @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  meetingUrl  String?   // Video conference URL
  recordingUrl String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  organizer   User      @relation("MeetingOrganizer", fields: [organizerId], references: [id])
  organizerId String
  attendees   MeetingAttendee[]
}

// Meeting Attendee
model MeetingAttendee {
  id          String    @id @default(cuid())
  status      AttendeeStatus @default(PENDING)
  joinedAt    DateTime?
  leftAt      DateTime?

  // Relations
  meeting     Meeting   @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  meetingId   String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  @@unique([meetingId, userId])
}

// Task Management
model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(NORMAL)
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  creator     User      @relation("TaskCreator", fields: [creatorId], references: [id])
  creatorId   String
  assignee    User?     @relation("TaskAssignee", fields: [assigneeId], references: [id])
  assigneeId  String?
}

// Approval Workflow
model Approval {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      ApprovalStatus @default(PENDING)
  type        ApprovalType
  metadata    Json?     // Form data or other relevant info
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId       String
  creator     User      @relation("ApprovalCreator", fields: [creatorId], references: [id])
  creatorId   String
  steps       ApprovalStep[]
}

// Approval Step
model ApprovalStep {
  id          String    @id @default(cuid())
  order       Int
  status      ApprovalStatus @default(PENDING)
  comment     String?
  decidedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  approval    Approval  @relation(fields: [approvalId], references: [id], onDelete: Cascade)
  approvalId  String
  approver    User      @relation("Approver", fields: [approverId], references: [id])
  approverId  String
}

// Enums
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum OrgRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

enum TeamRole {
  LEADER
  MEMBER
}

enum ChatType {
  DIRECT
  GROUP
  CHANNEL
}

enum ChatRole {
  OWNER
  ADMIN
  MEMBER
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  AUDIO
  VIDEO
  SYSTEM
}

enum DocType {
  DOC
  SHEET
  SLIDE
  WIKI
  FORM
}

enum AttendeeStatus {
  PENDING
  ACCEPTED
  DECLINED
  TENTATIVE
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  URGENT
  HIGH
  NORMAL
  LOW
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum ApprovalType {
  LEAVE
  EXPENSE
  PURCHASE
  CUSTOM
} 